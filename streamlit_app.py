# streamlit_app.py
import streamlit as st
import requests
from app.config import config

HOST = config.server_host
PORT = config.server_port


def main():
    st.title("Сервис классификации зловредного ПО")

    # User Registration Form
    st.header("Регистрация")
    email = st.text_input("Email")
    password = st.text_input("Password", type="password")

    if st.button("Register"):
        # Call your FastAPI /auth/sign-up endpoint here
        register_data = {"email": email, "password": password}

        response = requests.post(
            f"http://{HOST}:{PORT}/api/auth/sign-up", json=register_data
        )

        if response.status_code == 200:
            if 'yan' in email:
                st.success("Похоже, что вы Ян Анисимов! "
                           "Мы дарим вам 1000 кредитов =)")
            else:
                st.success("Пользователь успешно зарегистрирован!")
                st.success("Вам зачислены приветственные 100 кредитов!")

            login_data = {"username": email, "password": password}
            login_response = requests.post(
                f"http://{HOST}:{PORT}/api/auth/sign-in", data=login_data
            )

            # Save user_id and token to session state
            st.session_state.user_id = login_response.json().get("user_id")
            st.session_state.token = login_response.json().get("access_token")

            # Set session state to indicate successful authentication
            st.session_state.authenticated = True

        elif response.status_code == 400:
            st.warning("Пользователь уже существует. Вход в систему...")

            login_data = {"username": email, "password": password}
            login_response = requests.post(
                f"http://{HOST}:{PORT}/api/auth/sign-in", data=login_data
            )

            if login_response.status_code == 200:
                st.success("Пользователь успешно авторизовался!")

                # Save user_id and token to session state
                st.session_state.user_id = login_response.json().get(
                    "user_id")
                st.session_state.token = login_response.json().get(
                    "access_token")

                # Set session state to indicate successful authentication
                st.session_state.authenticated = True
            else:
                msg = login_response.json().get("detail")
                st.error(f"{msg}")
        else:
            st.error(f"Ошибка регистрации: {response.text}")

    # Check if the user is authenticated before showing upload file section
    if getattr(st.session_state, "authenticated", False):
        # Display user balance in the sidebar
        st.sidebar.header("Баланс")

        # Get current user's balance from the API
        balance_url = (
                f"http://{HOST}:{PORT}/api/users/balance/"
                f"{st.session_state.user_id}"
                )

        response = requests.get(balance_url)

        if response.status_code == 200:
            current_balance = response.json()["balance"]
            balance_widget = st.sidebar.text(
                f"Ваш текущий баланс: {current_balance} кредитов"
                )
        else:
            st.sidebar.error(f"Ошибка при получении баланса: {response.text}")

        # File Upload Section
        st.header("Загрузка данных")
        # Drag and drop file uploader
        uploaded_file = st.file_uploader(
            "Выберите файл для загрузки", type=["text", "csv"]
        )

        if uploaded_file is not None:
            # Save the uploaded file to session state
            st.session_state.uploaded_file = uploaded_file

            st.success(f"Файл {uploaded_file.name} успешно загружен!")

            # Model Selection Section
            st.header("Выбор модели для классификации")
            selected_model = st.selectbox(
                "Выберите модель",
                ["Random Forest", "MLP Classifier", "Logistic Regression"],
            )

            # Display cost based on selected model
            cost = 0
            if selected_model == "Random Forest":
                cost = 30
            elif selected_model == "MLP Classifier":
                cost = 15
            elif selected_model == "Logistic Regression":
                cost = 5
            st.write(f"Стоимость модели {selected_model}: {cost} кредитов")

    # Check if the file is uploaded
    if getattr(st.session_state, "uploaded_file", None):
        if st.button("Get Predict"):

            url = f"http://{HOST}:{PORT}/api/predictions/{selected_model}"
            headers = {"Authorization": f"Bearer {st.session_state.token}"}

            prediction_response = requests.post(
                url,
                headers=headers,
                files={
                    "file": (
                        st.session_state.uploaded_file.name,
                        st.session_state.uploaded_file.getvalue(),
                        st.session_state.uploaded_file.type,
                    )
                },
            )

            if prediction_response.status_code == 200:
                pred_id = prediction_response.json()["prediction_id"]
                st.success(f"Предсказание c id {pred_id} выполнено успешно!")

                # Save prediction id to session state
                st.session_state.pred_id = prediction_response.json().get(
                    "prediction_id"
                )

                download_url = (
                    f"http://{HOST}:{PORT}/api/predictions/download/"
                    f"{st.session_state.pred_id}"
                    )
                download_response = requests.get(download_url)

                if download_response.status_code == 200:
                    st.success("Вы можете скачать файл.")

                st.session_state.filepath = download_response.json().get(
                    "file_path")

                # Get current user's balance from the API
                balance_url = (
                        f"http://{HOST}:{PORT}/api/users/balance/"
                        f"{st.session_state.user_id}"
                        )

                response = requests.get(balance_url)

                if response.status_code == 200:
                    current_balance = response.json()["balance"]
                    balance_widget.text(
                        f"Ваш текущий баланс: {current_balance} кредитов"
                        )
                else:
                    st.sidebar.error(
                        f"Ошибка при получении баланса: {response.text}"
                        )

    # Check if we have prediction id
    if getattr(st.session_state, "filepath", None):

        with open(st.session_state.filepath) as f:
            st.download_button("Download file", f, file_name="prediction.csv")


if __name__ == "__main__":
    main()
