import pytest
from sqlalchemy.orm import Session
from fastapi import HTTPException

from app.services.users import UserService
from app.services.predictions import PredictionService
from app.repositories.user_repo import UserRepository
from app.repositories.model_repo import ModelRepository
from app.repositories.prediction_repo import PredictionRepository
from app.core.model_inference import predict_malware
from app.tests.test_auth import create_user_schema
from worker import run_worker
from multiprocessing import Process

from typing import List


async def read_file_as_bytes(file_path):
    with open(file_path, "rb") as file:
        file_bytes = file.read()
    return file_bytes


@pytest.mark.asyncio
@pytest.mark.parametrize(("sample_file_path", "model_name"), [
    ("app/tests/test_file/TUANDROMD_test.csv", "Random Forest"),
    ("app/tests/test_file/TUANDROMD_test.csv", "MLP Classifier"),
    ("app/tests/test_file/TUANDROMD_test.csv", "Logistic regression"),
])
async def test_model_inference(sample_file_path, model_name):
    file_bytes = await read_file_as_bytes(sample_file_path)
    result = await predict_malware(file_bytes, model_name)
    print(result)

    assert isinstance(result, List)


@pytest.mark.asyncio
async def test_create_prediction(db: Session):

    worker_process = Process(target=run_worker)
    worker_process.start()

    user_in = create_user_schema()
    user_service = UserService(UserRepository(db))
    user = await user_service.create_user(user_in)

    user_id = user.id
    name_model = "Random Forest"
    filepath = "app/tests/test_file/TUANDROMD_test.csv"
    file_bytes = await read_file_as_bytes(filepath)

    prediction_service = PredictionService(UserRepository(db),
                                           ModelRepository(db),
                                           PredictionRepository(db))
    prediction_response = await prediction_service.create_prediction(
        user_id=user_id, name_model=name_model, file=file_bytes
    )

    print(prediction_response)

    assert "prediction_id" in prediction_response

    worker_process.terminate()  # закрываем воркер


@pytest.mark.asyncio
async def test_create_prediction_insufficient_credits(db: Session):

    worker_process = Process(target=run_worker)
    worker_process.start()

    user_in = create_user_schema()
    user_in.email = "123@yanchik.org"
    user_service = UserService(UserRepository(db))
    user = await user_service.create_user(user_in)

    user_repo = UserRepository(db)
    user_repo.update_user_credits(user_id=user.id, balance=0)

    user_id = user.id
    name_model = "Random Forest"
    filepath = "app/tests/test_file/TUANDROMD_test.csv"
    file_bytes = await read_file_as_bytes(filepath)

    prediction_service = PredictionService(UserRepository(db),
                                           ModelRepository(db),
                                           PredictionRepository(db))

    await prediction_service.create_prediction(
            user_id=user_id, name_model=name_model, file=file_bytes
            )

    user_db = user_repo.get_user_by_id(user_id)

    assert user_db.credits > 0

    worker_process.terminate()  # закрываем воркер


@pytest.mark.asyncio
async def test_create_prediction_failed_prediction(db: Session):

    worker_process = Process(target=run_worker)
    worker_process.start()

    user_in = create_user_schema()
    user_service = UserService(UserRepository(db))
    user = await user_service.create_user(user_in)

    user_id = user.id
    name_model = "test_fail"  # fail test
    filepath = "app/tests/test_file/TUANDROMD_test.csv"
    file_bytes = await read_file_as_bytes(filepath)

    prediction_service = PredictionService(UserRepository(db),
                                           ModelRepository(db),
                                           PredictionRepository(db))

    with pytest.raises(HTTPException):
        await prediction_service.create_prediction(
                user_id=user_id, name_model=name_model, file=file_bytes
                )

    worker_process.terminate()  # закрываем воркер


@pytest.mark.asyncio
async def test_get_file_path_by_pred_id(db: Session):

    worker_process = Process(target=run_worker)
    worker_process.start()

    user_in = create_user_schema()
    user_service = UserService(UserRepository(db))
    user = await user_service.create_user(user_in)

    user_id = user.id
    name_model = "Random Forest"
    filepath = "app/tests/test_file/TUANDROMD_test.csv"
    file_bytes = await read_file_as_bytes(filepath)

    prediction_service = PredictionService(UserRepository(db),
                                           ModelRepository(db),
                                           PredictionRepository(db))

    prediction_response = await prediction_service.create_prediction(
        user_id=user_id, name_model=name_model, file=file_bytes
    )

    csv_file_path = await prediction_service.get_file_path_by_pred_id(
        prediction_response["prediction_id"])

    assert isinstance(csv_file_path["file_path"], str)

    worker_process.terminate()  # закрываем воркер
