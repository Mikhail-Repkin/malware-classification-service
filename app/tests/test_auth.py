import pytest
from sqlalchemy.orm import Session
from fastapi import HTTPException

from app.services.users import UserService
from app.services.auth import AuthService
from app.repositories.user_repo import UserRepository
from app.schemas.user import UserBase
import random
import string


def random_lower_string() -> str:
    return "".join(random.choices(string.ascii_lowercase, k=8))


def create_user_schema() -> UserBase:
    email = f"{random_lower_string()}@{random_lower_string()}.com"
    password = "".join(random_lower_string())
    user_in = UserBase(email=email, password=password)
    return user_in


@pytest.mark.asyncio
async def test_create_user(db: Session):
    user_in = create_user_schema()

    user_service = UserService(UserRepository(db))
    user = await user_service.create_user(user_in)

    assert user.email == user_in.email
    assert hasattr(user, "hashed_password")


@pytest.mark.asyncio
async def test_create_user_that_exists(db: Session):
    user_in = create_user_schema()
    user_service = UserService(UserRepository(db))
    await user_service.create_user(user_in)

    with pytest.raises(HTTPException):
        await user_service.create_user(user_in)


@pytest.mark.asyncio
async def test_get_user_by_email(db: Session):
    user_in = create_user_schema()
    user_service = UserService(UserRepository(db))

    registered_user = await user_service.create_user(user_in)

    user = await user_service.get_user_by_email(registered_user.email)

    assert user == registered_user


@pytest.mark.asyncio
async def test_get_user_by_id(db: Session):
    user_in = create_user_schema()
    user_service = UserService(UserRepository(db))
    registered_user = await user_service.create_user(user_in)

    user = await user_service.get_user_by_id(registered_user.id)

    assert user == registered_user


@pytest.mark.asyncio
async def test_authenticate_user(db: Session):
    user_in = create_user_schema()
    user_service = UserService(UserRepository(db))

    registered_user = await user_service.create_user(user_in)
    login_in = UserBase(email=registered_user.email, password=user_in.password)

    auth_service = AuthService(user_service)
    login_user = await auth_service.authenticate_user(login_in)

    assert registered_user == login_user


@pytest.mark.asyncio
async def test_authenticate_user_fail(db: Session):
    user_in = create_user_schema()

    auth_service = AuthService(UserService(UserRepository(db)))

    with pytest.raises(HTTPException):
        await auth_service.authenticate_user(user_in)
