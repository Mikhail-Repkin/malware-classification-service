from typing import Annotated
from fastapi import APIRouter, UploadFile, File, Depends

from app.services.auth import AuthService, get_auth_service
from app.schemas.prediction import PredictionResponse
from app.services.predictions import PredictionService, get_prediction_service
from app.core.security import oauth2_scheme

# Инициализация роутера
router = APIRouter(prefix="/predictions", tags=["predictions"])


@router.post("/{name_model}", response_model=PredictionResponse)
async def classify_malware_task(
    name_model: str,
    token: Annotated[str, Depends(oauth2_scheme)],
    auth_service: AuthService = Depends(get_auth_service),
    prediction_service: PredictionService = Depends(get_prediction_service),
    file: UploadFile = File(..., media_type="text/csv"),
):
    user = await auth_service.get_current_user(token)
    print(user)
    pred_id = await prediction_service.create_prediction(user.id,
                                                         name_model,
                                                         file.file.read())
    return pred_id


@router.get("/download/{pred_id}")
async def download_results(
    pred_id: int,
    prediction_service: PredictionService = Depends(get_prediction_service),
):

    file_path = await prediction_service.get_file_path_by_pred_id(pred_id)

    return file_path
