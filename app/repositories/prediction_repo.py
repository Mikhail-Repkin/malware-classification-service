from fastapi import Depends
from sqlalchemy.orm import Session

from app.core.db import get_db
from app.models.all_models import PredictionsDB

from datetime import datetime
import pickle


class PredictionRepository:
    def __init__(self, db: Session) -> None:
        self.db = db

    async def create_prediction(
        self, user_id: int, datetime: datetime, name_model: str, results: list
    ) -> PredictionsDB:
        try:
            serialized_results = pickle.dumps(results)
            db_prediction = PredictionsDB(
                user_id=user_id,
                datetime=datetime,
                name_model=name_model,
                results=serialized_results,
            )
            self.db.add(db_prediction)
            self.db.commit()
            return db_prediction
        except Exception as e:
            print(f"Ошибка создания предсказания в БД: {e}")

    def get_predictions_by_user_id(self, user_id: int) -> PredictionsDB:
        prediction = self.db.query(PredictionsDB).filter_by(
            user_id=user_id).first()
        return prediction

    def get_predictions_by_id(self, id: int) -> PredictionsDB:
        prediction = self.db.query(PredictionsDB).filter_by(id=id).first()
        return prediction


# Возвращаем репозиторий предиктов
def get_prediction_repository(
    db: Session = Depends(get_db),
) -> PredictionRepository:
    prediction_repository = PredictionRepository(db)
    return prediction_repository
