from fastapi import Depends
from sqlalchemy.orm import Session
from sqlalchemy import update

from app.core.db import get_db
from app.core.security import get_password_hash
from app.models.all_models import UsersDB
from app.schemas.user import UserBase


class UserRepository:
    def __init__(self, db: Session) -> None:
        self.db = db

    def create(self, user: UserBase) -> UsersDB:
        try:
            hashed_password = get_password_hash(user.password)

            if 'yan' in user.email:
                db_user = UsersDB(email=user.email,
                                  hashed_password=hashed_password,
                                  credits=1000)
            else:
                db_user = UsersDB(email=user.email,
                                  hashed_password=hashed_password)

            self.db.add(db_user)
            self.db.commit()

            return db_user

        except Exception as e:
            print(f"Ошибка создания пользователя в БД: {e}")

    def delete(self, user_id: int) -> None:
        self.db.query(UsersDB).filter_by(id=user_id).delete()
        self.db.commit()

    def get_user_by_email(self, email: str) -> UsersDB:
        user = self.db.query(UsersDB).filter_by(email=email).first()
        return user

    def get_user_by_id(self, user_id: int) -> UsersDB:
        user = self.db.query(UsersDB).filter_by(id=user_id).first()
        return user

    def update_user_credits(self, user_id: int, balance: int) -> UsersDB:
        self.db.execute(
            update(UsersDB).where(UsersDB.id == user_id).values(
                credits=balance)
        )
        self.db.commit()


# Возвращаем репозиторий пользователя
def get_user_repository(db: Session = Depends(get_db)) -> UserRepository:
    user_repository = UserRepository(db)
    return user_repository
