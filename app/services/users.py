from fastapi import HTTPException, Depends

from app.repositories.user_repo import UserRepository, get_user_repository
from app.schemas.user import UserBase, User


# Сервисный слой для работы с пользователями
class UserService:
    def __init__(self, db: UserRepository) -> None:
        self.db = db

    # Создание нового пользователя
    async def create_user(self, user: UserBase) -> User:
        curr_user = self.db.get_user_by_email(user.email)
        if curr_user:
            raise HTTPException(status_code=400,
                                detail="Пользователь существует!")

        curr_user = self.db.create(user)

        return curr_user

    # Получение данных пользователя по ID
    async def get_user_by_id(self, user_id: int) -> User:
        user = self.db.get_user_by_id(user_id)
        return user

    # Получение данных пользователя по email
    async def get_user_by_email(self, email: str) -> User:
        user = self.db.get_user_by_email(email)
        return user


# Внедрение зависимости от репозитория пользователя в экземпляр UserService
def get_user_service(
    user_repository: UserRepository = Depends(get_user_repository),
) -> UserService:
    user_service = UserService(user_repository)
    return user_service
