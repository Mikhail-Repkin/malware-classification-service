from jose import jwt, JWTError
from starlette import status
from fastapi import HTTPException, Depends

from app.config import config
from app.services.users import UserService, get_user_service
from app.core.security import verify_password
from app.schemas.token import TokenData
from app.schemas.user import UserBase, User


# Сервисный слой для работы с аутентификацией
class AuthService:
    def __init__(self, user_service: UserService) -> None:
        self.user_service = user_service

    async def authenticate_user(self, user: UserBase) -> User:
        db_user = await self.user_service.get_user_by_email(user.email)

        if not db_user:
            raise HTTPException(status_code=400,
                                detail="Пользователя не существует")

        if not verify_password(user.password, db_user.hashed_password):
            raise HTTPException(status_code=400,
                                detail="Неверный пароль или почта")

        return db_user

    async def get_current_user(self, token: str) -> User:

        credentials_exception = HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Не удалось проверить учетные данные. "
            "Пожалуйста, перелогиньтесь!",
            headers={"WWW-Authenticate": "Bearer"},
        )

        # Расшифровка токена
        try:
            payload = jwt.decode(
                token, config.jwt_secret_key,
                algorithms=[config.hash_algorithm]
            )
            email: str = payload.get("sub")
            if email is None:
                raise credentials_exception
            token_data = TokenData(email=email)
        except JWTError:
            raise credentials_exception

        user = await self.user_service.get_user_by_email(token_data.email)
        if user is None:
            raise credentials_exception
        return user


# Внедрение зависимости UserService в экземпляр AuthService
def get_auth_service(
    user_service: UserService = Depends(get_user_service),
) -> AuthService:
    auth_service = AuthService(user_service)
    return auth_service
