from sqlalchemy import (
    ForeignKey,
    PickleType
)
from sqlalchemy.orm import Mapped, mapped_column
from app.models.base import Base
import datetime


class UsersDB(Base):
    """
    Модель для хранения информации о пользователях.

    Attributes:
        id (int): Уникальный идентификатор пользователя.
        email (str): Адрес электронной почты пользователя.
        hashed_password (str): Зашифрованный пароль пользователя.
        credits (int): Количество кредитов на счету пользователя.
    """

    __tablename__ = "users"

    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    email: Mapped[str] = mapped_column(unique=True, nullable=False)
    hashed_password: Mapped[str] = mapped_column(nullable=False)
    credits: Mapped[int] = mapped_column(default=100)


class ModelsDB(Base):
    """
    Модель для хранения информации о различных ML-моделях.

    Attributes:
        id (int): Уникальный идентификатор модели.
        name (str): Название модели.
        description (str): Описание модели.
        cost_in_credits (int): Стоимость модели в кредитах.
    """

    __tablename__ = "models"

    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    name: Mapped[str] = mapped_column(nullable=False, unique=True)
    description: Mapped[str] = mapped_column(nullable=False)
    cost_in_credits: Mapped[int] = mapped_column(nullable=False)


class PredictionsDB(Base):
    """
    Модель для хранения информации о предсказаниях в ML-сервисе.

    Attributes:
        id (int): Уникальный идентификатор предсказания.
        user_id (int): Идентификатор пользователя, связанного с предсказанием.
        datetime (DateTime): Дата совершения предсказания.
        name_model (str): Название модели, связанной с предсказанием.
        results (PickleType): Список, представляющий предсказание модели.
    """

    __tablename__ = "predictions"

    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    datetime: Mapped[datetime.datetime]
    name_model: Mapped[str] = mapped_column(ForeignKey("models.name"))
    results: Mapped[PickleType] = mapped_column(PickleType)
